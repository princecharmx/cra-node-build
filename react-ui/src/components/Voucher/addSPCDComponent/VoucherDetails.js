//TODO: cancel button &&  card creation button are same make a reusable component using render props to share code between these components
//TODO: edit functionality doesnot populate this last data need to fix this
import { connect } from 'react-redux';
import styled from 'styled-components';
import React, { Component } from 'react';
import moment from 'moment';

import { Cancel, VoucherFold } from '../../../images';
import Voucher from '../VoucherBuilder';
import {
  updateVoucherNo,
  resetVoucherDetails,
  updateVouchersDetailsAccount,
  updateDate,
  handleVoucherDetaislDone,
  onUpdatebranchSearch,
  fetchBranches
} from '../../../actions/index';
import { AddDetailsLink } from '../AddDetailsLink';
import { ThemeDefaultValues } from '../../../ThemeProvider';
import {
  getAccountsDetails,
  getbranchNamesArray,
  getVoucherDetails,
  getShowCardForVoucherDetails
} from '../../../reducers';
import { Fields } from '../AddVoucherStyledComponents';

const ButtonContaner = styled.div`
  display: flex;
  padding: 0.5rem;
  justify-content: flex-end;
`;

const SubmitButton = styled.div`
  color: ${p => (p.isDisable ? '#95989A' : '#4964DA')};
  padding: 0.5rem;
  &: hover {
    cursor: ${p => (p.isDisable ? 'not-allowed' : 'pointer')};
  }
`;

//TODO: refactored this code is being repeated, Detais card for voucher details and transport details are same. Make common component for details card.
const Details = styled.div`
  display: grid;

  justify-items: left;
  grid-template-rows: repeat(2, 1fr);
  grid-template-columns: 1fr 4fr 4fr 1fr;
  border-radius: 2px solid #f5f5f5;
  background-color: ${ThemeDefaultValues.cardBackgroundColor};
  padding-bottom: 0.625rem;
  font-family: roboto;
`;
const DetailsIcons = styled.img`
  height: 25px;
  width: 25px;
  padding-right: 0.9rem;
  grid-row: span 3;
  padding-left: 0.5rem;
  align-self: center;
`;
const Font = styled.div`
  font-family: roboto;
  font-size: 1rem;
  padding: 0.2rem;
  text-overflow: ellipsis;
`;
const SubFont = styled(Font)`
  font-size: 0.8rem;
  color: #95989a;

  font-style: italic;
`;

const SubFontRight = styled(SubFont)`
  justify-self: right;
  padding-right: 0.9rem;
`;

const CloseIcons = styled(DetailsIcons)`
  height: 14px;
  width: 14px;
  padding: 0.4rem;
  align-self: start;
  align-items: center;
  cursor: pointer;
`;

const DetailsCard = ({ voucherDetails: { branch, date, accounts }, onCloseClick }) => {
  return (
    <Details>
      <DetailsIcons src={VoucherFold} />
      <Font>{`#Autogenerated`}</Font>
      <SubFontRight>{moment(date).format('Do MM YY')}</SubFontRight>
      <CloseIcons src={Cancel} onClick={onCloseClick} />
      <SubFont>{branch}</SubFont>
      <SubFontRight>{accounts}</SubFontRight>
    </Details>
  );
};

class VoucherDetails extends Component {
  state = {
    showLink: true
  };

  hideLink = () =>
    this.setState(
      state => {
        return { showLink: !state.showLink };
      },
      //once it is been reset to false reset or clean voucher details
      () => !this.state.showLink && this.props.resetVoucherDetails()
    );

  onCloseClick = () => {
    //this.hideLink();
    this.setState(_ => ({ showLink: false }));
    this.props.handleVoucherDetaislDone();
    //to reset for edit remove this action
    //this.props.resetVoucherDetails();
  };
  handleCancleOnClick = () => {
    //TODO: reset voucherDetaels from feilds
    this.props.resetVoucherDetails();
    this.hideLink();
  };

  handleDoneOnClick = () => {
    this.props.handleVoucherDetaislDone();
  };

  componentDidMount() {
    this.props.fetchBranches();
  }

  render() {
    const { props } = this;
    // const arryOfvoucherDetals = Object.values(props.voucherDetails.voucherDetails);
    // const { 0: voucherNo, 1: branch, 2: date, 3: accounts } = arryOfvoucherDetals; // destructured array to disable done button
    //const isBranchNamesArrayLength = props.branchNamesArray.length === 0 ? false : true;
    //console.log('isDisableBranch', isBranchNamesArrayLength)
    const isDisable = false;
    //const isDisable =  isDisableBranch && branch === '' ? true : false;

    return (
      <React.Fragment>
        {!this.props.showCard && this.state.showLink ? (
          <AddDetailsLink
            img={ThemeDefaultValues.addVoucherImage.voucherDetailsImg}
            addDetailsFieds={'Voucher Details'}
            onClick={this.hideLink}
          />
        ) : !this.state.showLink && !props.showCard ? (
          <React.Fragment>
            <Fields type="noLeftPadding">
              <Voucher.TextInput
                disabled={true}
                defaultValue="Invoice will be Autogenerated"
                labelText="Invoice No"
                floatingLabelFixed={true}
              />
              {props.branchNamesArray.length > 1 ? (
                <Voucher.Autocomplete
                  labelText="Branches"
                  dataSource={props.branchNamesArray || []}
                  searchText={props.branchSearchText}
                  onUpdateInput={props.onUpdatebranchSearch}
                />
              ) : null}
              <Voucher.DateInput
                labelText="Date"
                value={props.issueDateObj}
                onChange={props.updateDate}
              />

              <Voucher.Autocomplete
                labelText="Accounts"
                dataSource={
                  props.type === 'receipt' || props.type === 'payment'
                    ? ['cash']
                    : props.accountType
                }
                searchText={props.voucherDetailsAccounts}
                onUpdateInput={props.updateVouchersDetailsAccount}
                maxSearchResults={3}
              />
            </Fields>
            <ButtonContaner>
              <SubmitButton
                isDisable={isDisable}
                onClick={isDisable ? null : this.handleCancleOnClick}
              >
                {' '}
                Cancel
              </SubmitButton>
              <SubmitButton
                isDisable={isDisable}
                onClick={isDisable ? null : this.handleDoneOnClick}
              >
                {' '}
                Done
              </SubmitButton>
            </ButtonContaner>
          </React.Fragment>
        ) : (
          this.props.showCard && (
            <DetailsCard
              voucherDetails={props.voucherDetails.voucherDetails}
              onCloseClick={this.onCloseClick}
            />
          )
        )}
      </React.Fragment>
    );
  }
}

const mapDispatchToProps = {
  updateVoucherNo,
  updateDate,
  handleVoucherDetaislDone,
  resetVoucherDetails,
  updateVouchersDetailsAccount,
  onUpdatebranchSearch,
  fetchBranches
};

const mapStateToProps = state => {
  const { vouchers, vouchers: { _voucherDetailsAccounts: voucherDetailsAccounts } } = state;
  return {
    voucherDetailsAccounts,
    voucherNo: vouchers.purchase.payload.voucherNo,
    issueDateObj: vouchers._issueDateObj,
    branchNamesArray: getbranchNamesArray(state),
    voucherDetails: getVoucherDetails(state),
    showCard: getShowCardForVoucherDetails(state),
    accountType: getAccountsDetails(state) || []

    // branchSearchText: getBranchSearchText(vouchers),
    // branchNamesArray: getBranchDataSource(state)
  };
};

export default connect(mapStateToProps, mapDispatchToProps)(VoucherDetails);
